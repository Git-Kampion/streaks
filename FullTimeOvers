import pyodbc
from TypesObjectRet import BtOr
import pandas as pd
import sqlalchemy
import matplotlib.pyplot as plt 
import numpy as np
import seaborn as sb


#engine = sqlalchemy.create_engine('mysql+pymysql://username:password@localhost:3306/db_name')

conn = pyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\Users\letenok\Documents\work\Flashscore\streaks\2022-23Base.accdb')
cursor = conn.cursor()

insert_stmt2 = "select * from EPL"
#insert_stmt2 = "select * from EPL UNION select * from belgiumJPL union select * from EngLeagua1 union select * from EngLeagua2 union select * from SeriaB union select * from EplChampionShip23"
data = ("Chelsea")
cursor.execute(insert_stmt2)
sql_data = pd.DataFrame(cursor.fetchall())
teamCount = 0
halftomeGap = 2


teams = []
Ateams = []
Ateam = []
numOfGames = []
AwyOvs= ([],[],[],[],[])
AwyOvs1= ([],[],[],[],[])
AwyOvs2= ([],[],[],[],[])
Bts= ([],[],[],[],[])
FullTimeOvers= ([],[],[],[],[])
FullTimeOvers2= ([],[],[],[],[])
FullTimeOvers3= ([],[],[],[],[])
FullTimeOvers4= ([],[],[],[],[])


def createReport(data1,pd):
 
 with pd.ExcelWriter('streaks.xlsx') as writer:

  for ff in data1:
   if len(ff) >= 1: 
     try:
      sheetName =  ff[3][1]
      df2 = pd.DataFrame(list(zip(ff[1],ff[0])),ff[2],columns =[ff[4][1],sheetName])
      df2.to_excel(writer, sheet_name=sheetName )  
     except:
       g = ""
      


def awayFilter(data):
  for bb in data[0]:
   if bb[4] in Ateams:
    t = bb[4]
   else:
    Ateams.append(bb[4])
  
  for w in Ateams:
    t = w
    occurence = 0
    if t in Ateam:
      occurence = 0
    else:
     rfdA = BtOr.refindedDatam(t,data,4)
     AwOvers = BtOr.ndScoredWholeSeaon(t,rfdA,"a",6)
     afullTimeOver = BtOr.FixOverUnders(t,rfdA,"a",6)
     hBTS = BtOr.Bts(t,rfdA,"a",6)
     #Away over 0.5
     if len(rfdA) - AwOvers[0][0] <= 1:          
          AwyOvs[0].append(AwOvers[0][0])
          AwyOvs[1].append(len(rfdA))
          AwyOvs[2].append(t)
          AwyOvs[3].append("AwayGoal")
          AwyOvs[4].append("AwayGamesPlayed")
    #Away over 1.5
     if len(rfdA) - AwOvers[0][1] <= 1:          
          AwyOvs1[0].append(AwOvers[0][1])
          AwyOvs1[1].append(len(rfdA))
          AwyOvs1[2].append(t)
          AwyOvs1[3].append("AwayGoalover2")
          AwyOvs1[4].append("AwayGamesPlayed")  
     #Away over 2.5
     if len(rfdA) - AwOvers[0][2] <= 1:          
          AwyOvs2[0].append(AwOvers[0][2])
          AwyOvs2[1].append(len(rfdA))
          AwyOvs2[2].append(t)
          AwyOvs2[3].append("AwayGoalover3")
          AwyOvs2[4].append("AwayGamesPlayed")    
     #AwayBTS Yes
     if len(rfdA) - hBTS[0] <= 1:          
          Bts[0].append(hBTS[0])
          Bts[1].append(len(rfdA))
          Bts[2].append(t)
          Bts[3].append("AwayBTS")
          Bts[4].append("AwayGamesPlayed")
     #FullTimeOver 1.5
     if len(rfdA) == afullTimeOver[0][1]:          
          FullTimeOvers[0].append(afullTimeOver[0][1])
          FullTimeOvers[1].append(len(rfdA))
          FullTimeOvers[2].append(t)
          FullTimeOvers[3].append("AwayFullTimeOver1")
          FullTimeOvers[4].append("AwayGamesPlayed")
          
          #FullTimeOver 2.5
     if len(rfdA) - afullTimeOver[0][2] <= 1:          
          FullTimeOvers2[0].append(afullTimeOver[0][2])
          FullTimeOvers2[1].append(len(rfdA))
          FullTimeOvers2[2].append(t)
          FullTimeOvers2[3].append("AwayFullTimeOver2")
          FullTimeOvers2[4].append("AwayGamesPlayed")

          #FullTimeOver 3.5
     if len(rfdA) == afullTimeOver[0][3]:          
          FullTimeOvers3[0].append(afullTimeOver[0][3])
          FullTimeOvers3[1].append(len(rfdA))
          FullTimeOvers3[2].append(t)
          FullTimeOvers3[3].append("AwayFullTimeOver3")
          FullTimeOvers3[4].append("AwayGamesPlayed")

          #FullTimeOver 4.5
     if len(rfdA) == afullTimeOver[0][4]:          
          FullTimeOvers4[0].append(afullTimeOver[0][4])
          FullTimeOvers4[1].append(len(rfdA))
          FullTimeOvers4[2].append(t)
          FullTimeOvers4[3].append("AwayFullTimeOver4")
          FullTimeOvers4[4].append("AwayGamesPlayed")

  
  Info=(FullTimeOvers,FullTimeOvers2,FullTimeOvers3,FullTimeOvers4,Bts,AwyOvs,AwyOvs1,AwyOvs2)
  
  createReport(Info,pd)

     

def homeFilter(data):
  for ee in sql_data[0]:
   if ee[3] in teams:
    t = ee[3]
   else:
    teams.append(ee[3])

awayFilter(sql_data)

